# Este flujo de trabajo crear치 y enviar치 una nueva imagen de contenedor a Amazon ECR
# y luego desplegar치 una nueva definici칩n de tarea a Amazon ECS, cuando haya un push a la rama "main".

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:

  AWS_REGION: us-east-1

  ECR_REPOSITORY_BACKEND: artemis-backend-1
  ECR_REPOSITORY_FRONTEND: artemis-frontend-1-1

  CONTAINER_NAME_BACKEND: artemis-backend-container-1-1
  CONTAINER_NAME_FRONTEND: artemis-frontend-container-1-1-1

  ECS_CLUSTER_BACKEND: artemis-backend-cluster-1
  ECS_CLUSTER_FRONTEND: artemis-frontend-cluster-1-1

  ECS_SERVICE_BACKEND: artemis-backend-service-1
  ECS_SERVICE_FRONTEND: artemis-frontend-service-1-1

  ECS_TASK_DEFINITION_BACKEND: backend/task-definition.json
  ECS_TASK_DEFINITION_FRONTEND: frontend/task-definition.json
                                               
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    # Backend
    - name: Build, tag, and push image of backend container to Amazon ECR
      id: build-image-backend
      working-directory: backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        echo "imageBackend=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Fill in the new image ID for backend container in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ env.imageBackend }}

    - name: Deploy Amazon ECS task definition for backend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER_BACKEND }}
        wait-for-service-stability: true

    # Frontend
    - name: Build, tag, and push image of frontend container to Amazon ECR
      id: build-image-frontend
      working-directory: frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "imageFrontend=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Fill in the new image ID for frontend container in the Amazon ECS task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ env.imageFrontend }}

    - name: Deploy Amazon ECS task definition for frontend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER_FRONTEND }}
        wait-for-service-stability: true